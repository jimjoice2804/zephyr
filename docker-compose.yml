services:
  postgres:
    image: postgres:18
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-zephyr}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-zephyr}
    volumes:
      - "../files/postgres_data:/var/lib/postgresql/data"
    command: >
      postgres -c listen_addresses='*' -c max_connections=100 -c shared_buffers=256MB -c work_mem=4MB -c maintenance_work_mem=64MB -c effective_cache_size=1GB -c wal_level=replica -c max_wal_senders=4 -c log_statement=none -c timezone=UTC
    networks:
      - dokploy-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-zephyr} -d ${POSTGRES_DB:-zephyr}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:latest
    command: >
      redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru --appendonly yes --appendfsync everysec --loglevel notice --save 900 1
    volumes:
      - "../files/redis_data:/data"
    networks:
      - dokploy-network
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - "../files/minio_data:/data"
    networks:
      - dokploy-network
    command: minio server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`${MINIO_DOMAIN}`)"
      - "traefik.http.routers.minio.entrypoints=websecure"
      - "traefik.http.routers.minio.tls.certResolver=letsencrypt"
      - "traefik.http.services.minio.loadbalancer.server.port=9001"

  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile.prisma
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-zephyr}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-zephyr}?schema=public
      POSTGRES_PRISMA_URL: postgresql://${POSTGRES_USER:-zephyr}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-zephyr}?schema=public
      POSTGRES_URL_NON_POOLING: postgresql://${POSTGRES_USER:-zephyr}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-zephyr}?schema=public
    networks:
      - dokploy-network
    depends_on:
      postgres:
        condition: service_healthy
    command: [ "sh", "-c", "bunx prisma generate --schema packages/db/prisma/schema.prisma && bunx prisma db push --accept-data-loss --schema packages/db/prisma/schema.prisma" ]
    restart: "no"

  minio-init:
    image: alpine:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MC_HOST_minio: http://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@minio:9000
    networks:
      - dokploy-network
    command: [ "/bin/sh", "-c", " apk add --no-cache curl && curl -O https://dl.min.io/client/mc/release/linux-amd64/mc && chmod +x mc && echo 'Creating MinIO buckets...' && ./mc mb minio/uploads || true && ./mc mb minio/avatars || true && ./mc mb minio/temp || true && ./mc mb minio/backups || true && echo 'Setting bucket policies...' && ./mc anonymous set download minio/uploads || true && ./mc anonymous set download minio/avatars || true && ./mc anonymous set download minio/temp || true && ./mc anonymous set download minio/backups || true && echo 'Enabling versioning...' && ./mc version enable minio/uploads || true && ./mc version enable minio/avatars || true && ./mc version enable minio/temp || true && ./mc version enable minio/backups || true && echo 'MinIO initialization complete!' " ]
    restart: "no"

  postgres-init:
    image: postgres:18
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER:-zephyr}
      PGDATABASE: ${POSTGRES_DB:-zephyr}
    networks:
      - dokploy-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c '
        echo "Initializing PostgreSQL extensions..." &&
        psql -h postgres -c "
          CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
          CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";
          CREATE EXTENSION IF NOT EXISTS \"pg_stat_statements\";
          ALTER DATABASE ${POSTGRES_DB:-zephyr} SET timezone TO '\''UTC'\'';
        " &&
        echo "PostgreSQL initialization complete!"
      '
    restart: "no"

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_URL=https://${WEB_DOMAIN}
      - NEXT_PUBLIC_AUTH_URL=https://${AUTH_DOMAIN}
      - NEXT_PUBLIC_MINIO_ENDPOINT=https://${MINIO_DOMAIN}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-zephyr}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-zephyr}?schema=public
      - POSTGRES_PRISMA_URL=postgresql://${POSTGRES_USER:-zephyr}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-zephyr}?schema=public
      - POSTGRES_URL_NON_POOLING=postgresql://${POSTGRES_USER:-zephyr}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-zephyr}?schema=public
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=uploads
      - MINIO_PORT=9000
      - MINIO_CONSOLE_PORT=9001
      - MINIO_HOST=minio
      - MINIO_ENABLE_OBJECT_LOCKING=on
      - NEXT_TELEMETRY_DISABLED=1
      - TURBO_TELEMETRY_DISABLED=1
      - BETTER_AUTH_TELEMETRY=0
      - SUPPORT_EMAIL=${SUPPORT_EMAIL:-info@zephyyrr.in}
      - CRON_SECRET=${CRON_SECRET}
      - CRON_SECRET_KEY=${CRON_SECRET_KEY}
    networks:
      - dokploy-network
    depends_on:
      migrate:
        condition: service_completed_successfully
      minio-init:
        condition: service_completed_successfully
      postgres-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${WEB_DOMAIN}`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certResolver=letsencrypt"
      - "traefik.http.services.web.loadbalancer.server.port=3000"

  auth:
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_URL=https://${WEB_DOMAIN}
      - NEXT_PUBLIC_AUTH_URL=https://${AUTH_DOMAIN}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-zephyr}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-zephyr}?schema=public
      - POSTGRES_PRISMA_URL=postgresql://${POSTGRES_USER:-zephyr}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-zephyr}?schema=public
      - POSTGRES_URL_NON_POOLING=postgresql://${POSTGRES_USER:-zephyr}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-zephyr}?schema=public
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - RESEND_API_KEY=${RESEND_API_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
      - TWITTER_CLIENT_ID=${TWITTER_CLIENT_ID}
      - TWITTER_CLIENT_SECRET=${TWITTER_CLIENT_SECRET}
      - NEXT_TELEMETRY_DISABLED=1
      - TURBO_TELEMETRY_DISABLED=1
      - BETTER_AUTH_TELEMETRY=0
      - SUPPORT_EMAIL=${SUPPORT_EMAIL:-info@zephyyrr.in}
    networks:
      - dokploy-network
    depends_on:
      migrate:
        condition: service_completed_successfully
      postgres-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`${AUTH_DOMAIN}`)"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.routers.auth.tls.certResolver=letsencrypt"
      - "traefik.http.services.auth.loadbalancer.server.port=3001"

networks:
  dokploy-network:
    external: true
