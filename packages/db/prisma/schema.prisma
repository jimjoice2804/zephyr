// Prisma schema for the Zephyr database
// Uses Supabase or Vercel Postgres from vercel

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// User model
model User {
  id                      String                   @id
  username                String                   @unique
  displayName             String
  email                   String?                  @unique
  passwordHash            String?
  googleId                String?                  @unique
  githubId                String?                  @unique
  discordId               String?                  @unique
  twitterId               String?                  @unique
  avatarUrl               String?
  avatarKey               String?
  bio                     String?
  emailVerified           Boolean                  @default(false)
  sessions                Session[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]
  posts                   Post[]
  following               Follow[]                 @relation("Following")
  followers               Follow[]                 @relation("Followers")
  bookmarks               Bookmark[]
  comments                Comment[]
  vote                    Vote[]
  receivedNotifications   Notification[]           @relation("Recipient")
  issuedNotifications     Notification[]           @relation("Issuer")
  hnbookmark              HNBookmark[]

  createdAt DateTime @default(now())

  @@map("users")
}

// Email verification token model using JWT web tokens
model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
  @@map("email_verification_tokens")
}

// Password reset token model
model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
  @@map("password_reset_tokens")
}

// Session model
model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Follow model
model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

// Post model
model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  aura                Int            @default(0)
  viewCount           Int            @default(0)
  attachments         Media[]
  bookmarks           Bookmark[]
  comments            Comment[]
  linkedNotifications Notification[]
  vote                Vote[]
  shareStats          ShareStats[]

  createdAt DateTime @default(now())

  @@map("posts")
}

// Media model for post attachments
model Media {
  id        String    @id @default(cuid())
  postId    String?
  post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type      MediaType
  url       String
  key       String    @default("")
  mimeType  String    @default("application/octet-stream")
  size      Int       @default(0)
  createdAt DateTime  @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  CODE
}

// Upvotes & Downvotes model

model Vote {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  value  Int

  @@unique([userId, postId])
  @@map("votes")
}

// Bookmark model
model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model HNBookmark {
  id        String   @id @default(cuid())
  userId    String
  storyId   Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, storyId])
  @@index([userId])
}

// Comment model
model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("comments")
}

// Notification model
model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  AMPLIFY
  FOLLOW
  COMMENT
}

// ShareStats model
model ShareStats {
  id        String   @id @default(cuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  platform  String
  shares    Int      @default(0)
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([postId, platform])
  @@map("share_stats")
}

// Prisma schema for the Zephyr database
