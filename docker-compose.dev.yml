x-common-labels: &common-labels
  maintainer: "parazeeknova"
  environment: "development"

services:
  postgres-dev:
    container_name: zephyr-postgres-dev
    build:
      context: .
      dockerfile: ./docker/postgres/Dockerfile
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=zephyr
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=postgres-dev
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    networks:
      - dev_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d zephyr"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  postgres-init:
    profiles: ["init"]
    container_name: zephyr-postgres-init
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=zephyr
    networks:
      - dev_network
    depends_on:
      postgres-dev:
        condition: service_healthy
    command: >
      bash -c '
      echo "Waiting for PostgreSQL..." &&
      until PGPASSWORD=postgres psql -h postgres-dev -U postgres -d zephyr -c "\q"; do
        echo "Waiting for PostgreSQL to be ready..."
        sleep 2
      done &&
      echo "PostgreSQL is ready" &&
      echo "Initializing extensions..." &&
      PGPASSWORD=postgres psql -h postgres-dev -U postgres -d zephyr -c "
        CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
        CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";
        CREATE EXTENSION IF NOT EXISTS \"pg_stat_statements\";
        ALTER DATABASE zephyr SET timezone TO '\''UTC'\'';
      " &&
      echo "PostgreSQL extensions initialized successfully" &&
      echo "Database initialization complete!"
      '

  prisma-migrate:
    profiles: ["init"]
    container_name: zephyr-prisma-migrate
    image: node:24-alpine
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-dev:5432/zephyr?schema=public
      - POSTGRES_PRISMA_URL=postgresql://postgres:postgres@postgres-dev:5432/zephyr?schema=public
      - POSTGRES_URL_NON_POOLING=postgresql://postgres:postgres@postgres-dev:5432/zephyr?schema=public
      - NODE_ENV=development
      - DEBUG=prisma:*
    volumes:
      - ./packages/db:/app/packages/db
      - ./package.json:/app/package.json
      - ./bun.lock:/app/bun.lock
    networks:
      - dev_network
    depends_on:
      postgres-dev:
        condition: service_healthy
    command: >
      sh -c "
      echo 'Installing required packages...' &&
      apk add --no-cache postgresql-client netcat-openbsd &&
      echo 'Setting up Prisma...' &&
      npm install -g bun &&
      cd /app &&
      echo 'Installing dependencies...' &&
      bun install --frozen-lockfile &&
      cd packages/db &&
      echo 'Waiting for PostgreSQL...' &&
      until pg_isready -h postgres-dev -p 5432 -U postgres; do
        echo 'Waiting for PostgreSQL to be ready...'
        sleep 2
      done &&
      echo 'PostgreSQL is ready' &&
      echo 'Running Prisma migrations...' &&
      bunx prisma generate &&
      echo 'Prisma Client generated' &&
      sleep 2 &&
      PRISMA_CLIENT_ENGINE_TYPE=binary DEBUG='*' bunx prisma db push --accept-data-loss --skip-generate &&
      echo 'Prisma migrations completed!' &&
      echo 'Database initialization complete!'"

  redis-dev:
    container_name: zephyr-redis-dev
    build:
      context: .
      dockerfile: ./docker/redis/Dockerfile
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_MAXMEMORY=512mb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    volumes:
      - redis_data_dev:/data
    networks:
      - dev_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    labels:
      <<: *common-labels
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-zephyrredis}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio-dev:
    container_name: zephyr-minio-dev
    build:
      context: .
      dockerfile: ./docker/minio/Dockerfile
    ports:
      - "9080:9000"
      - "9001:9001"
    environment:
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    volumes:
      - minio_data_dev:/data
    networks:
      - dev_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    labels:
      <<: *common-labels
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  minio-init:
    profiles: ["init"]
    image: minio/mc
    depends_on:
      minio-dev:
        condition: service_healthy
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    entrypoint: >
      /bin/sh -c '
      echo "Waiting for MinIO..." &&
      sleep 15 &&
      until mc alias set minio http://minio-dev:9000 minioadmin minioadmin; do
        echo "Waiting for MinIO to be ready..."
        sleep 5
      done &&
      echo "MinIO is ready" &&
      mc mb minio/uploads || true &&
      mc anonymous set download minio/uploads || true &&
      mc version enable minio/uploads || true &&
      mc mb minio/avatars || true &&
      mc anonymous set download minio/avatars || true &&
      mc version enable minio/avatars || true &&
      mc mb minio/temp || true &&
      mc anonymous set download minio/temp || true &&
      mc version enable minio/temp || true &&
      mc mb minio/backups || true &&
      mc anonymous set download minio/backups || true &&
      mc version enable minio/backups || true &&
      echo "ðŸŽ‰ MinIO initialization completed!"
      '
    networks:
      - dev_network

networks:
  dev_network:
    driver: bridge
    name: zephyr_dev_network
    labels:
      <<: *common-labels

volumes:
  postgres_data_dev:
    name: zephyr_postgres_data_dev
  redis_data_dev:
    name: zephyr_redis_data_dev
  minio_data_dev:
    name: zephyr_minio_data_dev
