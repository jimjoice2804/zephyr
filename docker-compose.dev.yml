x-common-labels: &common-labels
  maintainer: "Parazeeknova"
  environment: "development"

x-common-deploy: &common-deploy
  resources:
    limits:
      memory: 1G
    reservations:
      memory: 512M

services:
  postgres-dev:
    container_name: zephyr-postgres-dev
    build:
      context: .
      dockerfile: ./docker/postgres/Dockerfile
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=zephyr
      - POSTGRES_PORT=5433
      - POSTGRES_HOST=localhost
      - DATABASE_URL=postgresql://postgres:postgres@%2Fvar%2Frun%2Fpostgresql/zephyr?schema=public
      - POSTGRES_PRISMA_URL=postgresql://postgres:postgres@%2Fvar%2Frun%2Fpostgresql/zephyr?schema=public
      - POSTGRES_URL_NON_POOLING=postgresql://postgres:postgres@%2Fvar%2Frun%2Fpostgresql/zephyr?schema=public
    ports:
      - "5433:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./docker/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./docker/postgres/init.sh:/docker-entrypoint-initdb.d/init.sh:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - dev_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    labels:
      <<: *common-labels
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -U postgres -d zephyr"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis-dev:
    container_name: zephyr-redis-dev
    build:
      context: .
      dockerfile: ./docker/redis/Dockerfile
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_MAXMEMORY=512mb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    volumes:
      - redis_data_dev:/data
    networks:
      - dev_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    labels:
      <<: *common-labels
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-zephyrredis}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  minio-dev:
    container_name: zephyr-minio-dev
    build:
      context: .
      dockerfile: ./docker/minio/Dockerfile
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    volumes:
      - minio_data_dev:/data
    networks:
      - dev_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    labels:
      <<: *common-labels
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  minio-init:
    image: minio/mc
    depends_on:
      minio-dev:
        condition: service_healthy
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    entrypoint: >
      /bin/sh -c "
      echo '‚è≥ Waiting for MinIO...' &&
      until mc config host add minio http://minio-dev:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD; do
        echo 'Waiting for MinIO to be ready...'
        sleep 2
      done &&
      echo '‚úÖ MinIO is ready' &&
      for bucket in uploads temp backups; do
        echo 'üì¶ Creating bucket:' $$bucket &&
        mc mb --ignore-existing minio/$$bucket &&
        mc policy set public minio/$$bucket &&
        mc version enable minio/$$bucket &&
        if [ $$bucket = 'backups' ]; then
          mc retention set --default compliance 7d minio/$$bucket
        fi &&
        echo '‚úÖ Bucket' $$bucket 'configured'
      done &&
      echo 'üéâ MinIO initialization completed!'
      "
    networks:
      - dev_network

networks:
  dev_network:
    driver: bridge
    name: zephyr_dev_network
    labels:
      <<: *common-labels

volumes:
  postgres_data_dev:
    name: zephyr_postgres_data_dev
  redis_data_dev:
    name: zephyr_redis_data_dev
  minio_data_dev:
    name: zephyr_minio_data_dev
